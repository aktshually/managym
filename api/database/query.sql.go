// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    id,
    email,
    password,
    first_name,
    last_name
) VALUES ($1, $2, $3, $4, $5)
RETURNING id, email, first_name, last_name, created_at, updated_at, is_active
`

type CreateUserParams struct {
	ID        string
	Email     string
	Password  string
	FirstName string
	LastName  string
}

type CreateUserRow struct {
	ID        string
	Email     string
	FirstName string
	LastName  string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	IsActive  pgtype.Bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password, first_name, last_name, created_at, updated_at, is_active FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}
